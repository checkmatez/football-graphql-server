type Query {
  me: User!
  dispute(id: ID): Dispute!
  disputes(creatorId: ID, pagination: Pagination): [Dispute!]!
  answers(creatorId: ID, pagination: Pagination): [Answer!]!
}

type Mutation {
  sendPinCode(phone: String!): Int
  loginByPin(phone: String!, pinCode: Int!): AuthPayload
  createDispute(matchId: ID!, text: String!, amount: Int!): Dispute
  deleteDispute(id: ID!): Dispute
  createAnswer(disputeId: ID!, comment: String!, amount: Int!): Answer
}

scalar DateTime

enum OperationResult {
  SUCCESS
  FAILURE
}

input Pagination {
  start: Int!
  limit: Int!
}

type User {
  id: ID!
  username: String
  firstName: String!
  lastName: String!
  state: UserState!
  phone: String
  balance: Int
  avatar: String
  avatar100: String
  avatar600: String
}

enum UserState {
  ACTIVE
  DISABLED
}

type AuthPayload {
  accessToken: String!
  currentUser: User!
}

type Dispute {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: User!
  state: DisputeState!
  result: DisputeResult
  confirmation: DisputeConfirmation
  amount: Int!
  text: String!
  match: Match!
  answers: [Answer!]!
}

enum DisputeState {
  ACTIVE
  LOCKED
  FINISHED
  DELETED
  ARCHIVED
}

enum DisputeResult {
  WIN
  LOSS
  CANCELLED
  MODERATION
  WAITING
}

enum DisputeConfirmation {
  WIN
  LOSS
  WAITING
}

type Match {
  id: ID
  round: Int!
  roundName: String
  stadium: String
  city: String
  team1: Team!
  team2: Team!
  startedAt: DateTime
  result: String!
  state: MatchState!
}

enum MatchState {
  WAITING
  ACTIVE
  FINISHED
}

type Team {
  id: ID!
  name: String!
  city: String
  stadium: String
  logo: String
  league: League!
}

enum League {
  RFPL
  FNL
}

type Answer {
  id: ID!
  createdAt: DateTime!
  dispute: Dispute!
  creator: User!
  state: AnswerState!
  amount: Int!
  comment: String!
  "Какая-то херня с нашего сервера. Нам не нужно, но пока оставил это поле."
  side: Int!
}

enum AnswerState {
  ACTIVE
  WAITING
  WIN
  LOSS
}
